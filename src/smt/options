#
# Option specification file for CVC4
# See src/options/options for a description of this file format
#

# FIXME: need to add support for SMT-LIBv2-required options:
#
#   expand-definitions
#   regular-output-channel
#   diagnostic-output-channel
#   produce-unsat-cores
#
# also need to implement print-success
#

module SMT "smt/options.h" SMT

common-option - --dump=MODE argument :handler CVC4::smt::dumpMode :handler-include "smt/options_handlers.h"
 dump preprocessed assertions, etc., see --dump=help
common-option - --dump-to=FILE argument :handler CVC4::smt::dumpToFile :handler-include "smt/options_handlers.h"
 all dumping goes to FILE (instead of stdout)

option printSuccess print-success --print-success bool :default false
 print SMT-LIBv2 conformant "success" messages

expert-option lazyDefinitionExpansion --lazy-definition-expansion bool
 expand define-funs/LAMBDAs lazily

option simplificationMode --simplification=MODE SimplificationMode :handler CVC4::smt::stringToSimplificationMode :default SIMPLIFICATION_MODE_BATCH :include "options/options.h" :handler-include "smt/options_handlers.h"
 choose simplification mode, see --simplification=help
alias --no-simplification = --simplification=none

option doStaticLearning static-learning /--no-static-learning bool :default true
 use static learning (on by default)
/turn off static learning (e.g. diamond-breaking)

common-option produceModels produce-models -m --produce-models bool
 support the get-value command
common-option produceAssignments produce-assignments --produce-assignments bool
 support the get-assignment command

# This could go in src/main/options, but by SMT-LIBv2 spec, "interactive"
# is a mode in which the assertion list must be kept.  So it belongs here.
common-option interactive interactive-mode --interactive bool :predicate CVC4::smt::setInteractiveByUser :read-write :predicate-include "smt/options_handlers.h"
 force interactive mode
option interactiveSetByUser bool

common-option incrementalSolving incremental -i --incremental bool
 enable incremental solving

common-option cumulativeMillisecondLimit --tlimit=MS "unsigned long"
 enable time limiting (give milliseconds)
common-option perCallMillisecondLimit --tlimit-per=MS "unsigned long"
 enable time limiting per query (give milliseconds)
common-option cumulativeResourceLimit --rlimit=N "unsigned long"
 enable resource limiting
common-option perCallResourceLimit --rlimit-per=N "unsigned long"
 enable resource limiting per query

option replayFilename --replay=FILE std::string :handler CVC4::smt::checkReplayFilename :handler-include "smt/options_handlers.h"
 replay decisions from file
option replayLog --replay-log=FILE std::ostream* :handler CVC4::smt::checkReplayLogFilename :handler-include "smt/options_handlers.h"
 log decisions and propagations to file
option replayStream ExprStream*

endmodule
