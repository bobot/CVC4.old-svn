#
# Option specification file for CVC4
# See src/options/base_options for a description of this file format
#

module SMT "smt/options.h" SMT layer

common-option - --dump=MODE argument :handler CVC4::smt::dumpMode :handler-include "smt/options_handlers.h"
 dump preprocessed assertions, etc., see --dump=help
common-option - --dump-to=FILE argument :handler CVC4::smt::dumpToFile :handler-include "smt/options_handlers.h"
 all dumping goes to FILE (instead of stdout)

option simplificationMode simplification-mode --simplification=MODE SimplificationMode :handler CVC4::smt::stringToSimplificationMode :default SIMPLIFICATION_MODE_BATCH :read-write :include "smt/simplification_mode.h" :handler-include "smt/options_handlers.h"
 choose simplification mode, see --simplification=help
alias --no-simplification = --simplification=none
 turn off all simplification (same as --simplification=none)

option doStaticLearning static-learning --static-learning bool :default true
 use static learning (on by default)

option expandDefinitions expand-definitions bool :default false
 always expand symbol definitions in output
common-option produceModels produce-models -m --produce-models bool :default false :predicate CVC4::smt::beforeSearch :predicate-include "smt/smt_engine.h"
 support the get-value and get-model commands
option checkModels check-models --check-models bool :predicate CVC4::smt::beforeSearch :predicate-include "smt/options_handlers.h"
 after SAT/INVALID/UNKNOWN, check that the generated model satisfies user assertions
option proof produce-proofs --proof bool :default false :predicate CVC4::smt::proofEnabledBuild CVC4::smt::beforeSearch :predicate-include "smt/options_handlers.h"
 turn on proof generation
# this is just a placeholder for later; it doesn't show up in command-line options listings
undocumented-option unsatCores produce-unsat-cores --produce-unsat-cores bool :predicate CVC4::smt::unsatCoresEnabledBuild CVC4::smt::beforeSearch :predicate-include "smt/options_handlers.h"
 turn on unsat core generation (NOT YET SUPPORTED)
option produceAssignments produce-assignments --produce-assignments bool :default false :predicate CVC4::smt::beforeSearch :predicate-include "smt/options_handlers.h"
 support the get-assignment command

# This could go in src/main/options, but by SMT-LIBv2 spec, "interactive"
# is a mode in which the assertion list must be kept.  So it belongs here.
common-option interactive interactive-mode --interactive bool :read-write
 force interactive mode

option doITESimp --ite-simp bool :read-write
 turn on ite simplification (Kim (and Somenzi) et al., SAT 2009)

option unconstrainedSimp --unconstrained-simp bool :default false :read-write
 turn on unconstrained simplification (see Bruttomesso/Brummayer PhD thesis)

option repeatSimp --repeat-simp bool :read-write
 make multiple passes with nonclausal simplifier

option sortInference --sort-inference bool :default false
 apply sort inference to input problem

common-option incrementalSolving incremental -i --incremental bool
 enable incremental solving

option abstractValues abstract-values --abstract-values bool :default false
 in models, output arrays (and in future, maybe others) using abstract values, as required by the SMT-LIB standard

option - regular-output-channel argument :handler CVC4::smt::setRegularOutputChannel :handler-include "smt/options_handlers.h"
 set the regular output channel of the solver
option - diagnostic-output-channel argument :handler CVC4::smt::setDiagnosticOutputChannel :handler-include "smt/options_handlers.h"
 set the diagnostic output channel of the solver

common-option cumulativeMillisecondLimit --tlimit=MS "unsigned long"
 enable time limiting (give milliseconds)
common-option perCallMillisecondLimit --tlimit-per=MS "unsigned long"
 enable time limiting per query (give milliseconds)
common-option cumulativeResourceLimit --rlimit=N "unsigned long"
 enable resource limiting
common-option perCallResourceLimit --rlimit-per=N "unsigned long"
 enable resource limiting per query

# --replay is currently broken; don't document it for 1.0
undocumented-option replayFilename --replay=FILE std::string :handler CVC4::smt::checkReplayFilename :handler-include "smt/options_handlers.h"
 replay decisions from file
undocumented-option replayLog --replay-log=FILE std::ostream* :handler CVC4::smt::checkReplayLogFilename :handler-include "smt/options_handlers.h"
 log decisions and propagations to file
option replayStream ExprStream*

# portfolio options
option lemmaInputChannel LemmaInputChannel* :default NULL :include "util/lemma_input_channel.h"
 The input channel to receive notfication events for new lemmas
option lemmaOutputChannel LemmaOutputChannel* :default NULL :include "util/lemma_output_channel.h"
 The output channel to receive notfication events for new lemmas

endmodule
