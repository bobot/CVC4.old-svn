"options" branch for better option processing
=============================================

This branch is intended to try out some new ideas for options processing.

The option design here should:

1. not require full source rebuild if one small option is added to e.g. a theory
2. be typesafe and error-producing at the time of setting the option (if e.g. incorrectly-typed)
   perhaps arbitrary predicates should be attachable also (so that range-checking or file-exists or ... could be checked)
3. support API programmatic option assignment (and by extension SMT set-option etc.)
   (the command-line name may differ from the SmtEngine.setOption() name though, and
   language front-ends are permitted to parse their language options however is appropriate)
4. support options to be declared as change-able "online" or not, and have the SmtEngine throw ModalException where appropriate
5. be fast!  So Options::current()->foo isn't slower than it currently is.

Say we have "options" files (like "kinds" but also in directories outside of src/theory.. like src/prop, src/smt, etc.

The subdirs (src/theory/arith, src/smt, src/main, etc.) have an "internal" header and an "external" header that are autogenerated.
The external header declares options and types is #include'd by the main options processor in src/util/options.cpp.
The internal header specializes the Options::operator()[] template and is #include'd by anyone wanting to use the statistic.
There is also an autogenerated internal source file that includes the implementations for the specialized template (which reaches into an "options_holder" structure internal to the options processor and that changes when ANYONE adds an option).

In this design, if you change an option in src/theory/arith/options, then
1. anything that includes src/theory/arith/options.h must be recompiled
2. anything that includes src/util/options_holder.h must be recompiled -- which means all the individual options.cpp (internal source) files

Generally this means that src/util/options.cpp is recompiled, all the src/*/*/options.cpp files, and all the files in src/theory/arith/* that use arith options.
This is much better than a full recompile of course.

-- Morgan Deters <mdeters@cs.nyu.edu>  Thu, 10 Nov 2011 19:31:57 -0500

The above is now implemented, but there are things that still bug me:

* long doc vs. short doc
* is the Options class public still?  Does this make sense?
* document requirements on option types (default constructible?  copy-able?  must have operator<<(ostream)?  hashable?)
* getopt() on old GNU needs optind = 0 to restart ?
* maybe .set() should be defined on all options, so that the Options::set()
  template is instantiated and you get the you_are_trying... error for
  R/O options?
* need a programmatic way to assign R/O options without going through
  SmtEngine/parseOptions, for library users to properly set up an Options
  before creating the ExprManager.  Essentially like the assign() and
  assignBool() interfaces.

-- Morgan Deters <mdeters@cs.nyu.edu>  Fri, 01 Jun 2012 13:53:10 -0400
