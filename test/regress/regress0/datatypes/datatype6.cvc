% EXPECT: Satisfiable

DATATYPE mat_density = dense | sparse END;
DATATYPE ds_types = list_ds | array_ds | other END;
DATATYPE alg_types = array_alg | list_alg | other2 END;

matrix : mat_density;
ds : ds_types;
alg : alg_types;

% The constraints:
CHECKSAT (

(ds = array_ds => matrix = dense) AND
(ds = list_ds => matrix = sparse) AND
(alg = array_alg => ds = array_ds) AND
(alg = list_alg => ds = list_ds));

COUNTEREXAMPLE;
PUSH;
COUNTERMODEL;
POP;
CONTINUE;

COUNTEREXAMPLE;
PUSH;
COUNTERMODEL;
POP;
CONTINUE;

COUNTEREXAMPLE;
PUSH;
COUNTERMODEL;
POP;
CONTINUE;

COUNTEREXAMPLE;
PUSH;
COUNTERMODEL;
POP;
CONTINUE;

COUNTEREXAMPLE;
PUSH;
COUNTERMODEL;
POP;
CONTINUE;

COUNTEREXAMPLE;
PUSH;
COUNTERMODEL;
POP;
CONTINUE;
