% EXPECT: valid
% EXIT: 20

DATATYPE
  Dn =
    clabel (len : BITVECTOR(6), slabel : (LET cvc_0: TYPE = BITVECTOR(8)
IN (ARRAY cvc_0 OF cvc_0)), rest : Dn)
  | indirect (offset : BITVECTOR(14))
  | nullt
END;;
x : Dn;
w1: BITVECTOR( 8);
w2: BITVECTOR( 8);

% Adding this as a "shift and mask" operation in preference to "shift_string"
to_string : (ARRAY BITVECTOR(8) OF BITVECTOR(8), BITVECTOR(8), BITVECTOR(8)) -> ARRAY BITVECTOR(8) OF BITVECTOR(8);
ASSERT 
 (FORALL 
   (s: (LET cvc_0: TYPE = BITVECTOR(8) IN (ARRAY cvc_0 OF cvc_0)), 
    i, j, n: BITVECTOR(8)) : PATTERN(to_string(s, i, n)[j]) :
   (IF BVLT(j,n) THEN to_string(s, i, n)[j] = s[BVPLUS(8,i,j)]
                 ELSE to_string(s, i, n)[j] = 0hex00
                 ENDIF));

bits_to_dn: (ARRAY BITVECTOR(8) OF BITVECTOR(8), BITVECTOR(8)) -> Dn;
sizeDn: Dn -> BITVECTOR(8);

ASSERT (FORALL (s: (LET cvc_0: TYPE = BITVECTOR(8)
IN (ARRAY cvc_0 OF cvc_0)), w1: BITVECTOR(8)) :
PATTERN (bits_to_dn(s, w1)) :
((s[w1] = (0bin0000000 @ 0bin0)) => is_nullt(bits_to_dn(s, w1))));

ASSERT (FORALL (s: (LET cvc_0: TYPE = BITVECTOR(8)
IN (ARRAY cvc_0 OF cvc_0)), w1: BITVECTOR(8)) :
PATTERN (bits_to_dn(s, w1)) :
(LET cvc_1 = s[w1]
IN ((((cvc_1)[7:6] = 0bin00) AND NOT ((cvc_1)[5:0] = SX(0bin00000,6))) => is_clabel(bits_to_dn(s, w1)))));

ASSERT (FORALL (s: (LET cvc_0: TYPE = BITVECTOR(8)
IN (ARRAY cvc_0 OF cvc_0)), w1: BITVECTOR(8)) :
PATTERN (bits_to_dn(s, w1)) :
(((s[w1])[7:6] = 0bin11) <=> is_indirect(bits_to_dn(s, w1))));

ASSERT (FORALL (s: (LET cvc_0: TYPE = BITVECTOR(8)
IN (ARRAY cvc_0 OF cvc_0)), w1: BITVECTOR(8)) :
PATTERN (bits_to_dn(s, w1)) :
(LET cvc_1 = bits_to_dn(s, w1)
IN (is_clabel(cvc_1) => (len(cvc_1) = (s[w1])[5:0]))));

ASSERT (FORALL (s: (LET cvc_0: TYPE = BITVECTOR(8)
IN (ARRAY cvc_0 OF cvc_0)), w1: BITVECTOR(8)) :
PATTERN (bits_to_dn(s, w1)) :
(LET cvc_1 = bits_to_dn(s, w1)
IN (is_clabel(cvc_1) => (slabel(cvc_1) = to_string(s, BVPLUS(8, w1, 0hex01), 0bin00 @ len(cvc_1))))));

ASSERT (FORALL (s: (LET cvc_0: TYPE = BITVECTOR(8)
IN (ARRAY cvc_0 OF cvc_0)), w1: BITVECTOR(8)) :
PATTERN (bits_to_dn(s, w1)) :
 (LET cvc_1 = bits_to_dn(s, w1)
IN (is_clabel(cvc_1) => (rest(cvc_1) = bits_to_dn(s, BVPLUS(8, BVPLUS(8, w1, (0bin000000 @ 0bin01)), (0bin00 @ len(cvc_1))))))));

ASSERT (FORALL (s: (LET cvc_0: TYPE = BITVECTOR(8)
IN (ARRAY cvc_0 OF cvc_0)), w1: BITVECTOR(8)) :
PATTERN (bits_to_dn(s, w1)) :
 (LET cvc_1 = bits_to_dn(s, w1)
IN (is_indirect(cvc_1) => (offset(cvc_1) = ((s[w1])[5:0] @ s[BVPLUS(8, w1, (0bin000000 @ 0bin01))])))));

ASSERT (FORALL (x: Dn) : (is_indirect(x) => (sizeDn(x) = (0bin00000 @ 0bin010))));

ASSERT (FORALL (x: Dn) : (is_clabel(x) => (sizeDn(x) = BVPLUS(8, (0bin00 @ len(x)), sizeDn(rest(x)), (0bin000000 @ 0bin01)))));

ASSERT (FORALL (x: Dn) : (is_nullt(x) => (sizeDn(x) = (0bin0000000 @ 0bin0))));

% ASSERT (FORALL (m1, m2: ARRAY BITVECTOR(8) OF BITVECTOR(8), p, q: BITVECTOR(8)) : (LET sz1 : BITVECTOR(8) = sizeDn(bits_to_dn(m1,q)) IN (BVLE(BVSUB(8,p,q),BVSUB(8,sz1,q)) => m1[p] = m2[p]) => bits_to_dn(m1,q) = bits_to_dn(m2,q)));

a, b: ARRAY BITVECTOR(8) OF BITVECTOR(8);
p, q : BITVECTOR(8);
x, y : Dn;

ASSERT a[p] = 0hex01;
ASSERT a[BVPLUS(8,p,0hex02)] = 0hex00;
ASSERT x = bits_to_dn(a,p);

ASSERT q = BVSUB(8,p,0hex01);
ASSERT b = a WITH [q] := BVSUB(8,a[q],0hex01);

ASSERT y = bits_to_dn(b,p);

QUERY x = y;
